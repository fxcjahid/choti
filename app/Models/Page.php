<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Str;

class Page extends Model
{
    use HasFactory, SoftDeletes;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'user_id',
        'status', // 'publish','draft', 'trash'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function ($page) {
            // Create Page URL
            if (empty($page->slug)) {
                $makeSlug   = (Str::slug($page->name)) ? Str::slug($page->name) : time();
                $page->slug = $makeSlug;
            }

            // Create Page Content
            if (empty($page->content)) {
                $page->content = json_encode([]);
            }

            // Set Article Status
            if (empty($page->status)) {
                $page->status = 'draft';
            }
        });
    }

    /**
     * Checking exiting Slug or ID
     */
    public static function existSlugOrID($ID)
    {
        return self::where('id', $ID)
            ->orWhere('slug', $ID)->exists();
    }

    /**
     * Find exiting post By Slug Or ID
     */
    public static function findBySlugOrID($find)
    {
        return self::with([
            'user',
        ])->where('slug', $find)
            ->orWhere('id', $find)
            ->firstOrFail();
    }

    /**
     * Create New Page
     */
    public static function CreatePage()
    {
        return self::Create(
            [
                'user_id' => auth()->id(),
            ]
        )->fresh();
    }

    /**
     * Count page statistics
     * @var all
     * @var publish
     * @var draft
     * @var trash
     * @return mixed
     */
    public static function statistics()
    {
        $all        = self::count('status');
        $publish    = self::where('status', '=', 'publish')->count('status');
        $draft      = self::where('status', '=', 'draft')->count('status');
        $trash      = self::where('status', '=', 'trash')->count('status');
        $lastUpdate = self::where('updated_at', '>', now()->subDays(10)->endOfDay())->count('id');

        return (object) array(
            'all'        => $all,
            'publish'    => $publish,
            'draft'      => $draft,
            'trash'      => $trash,
            'lastUpdate' => $lastUpdate,
        );
    }

    /**
     * Get all Page
     * @return mixed
     */
    public static function getAll()
    {
        return self::with([
            'user',
        ]);
    }

    /**
     * Get pages link for Sitemap
     */
    public static function sitemap()
    {
        return [
            route('home'),
            route('guides-nuisibles'),
            route('about-us'),
            route('privacy-policy'),
        ];
    }

    /**
     * Get Page Creator
     * Relation between table
     */
    public function user()
    {
        return $this->belongsTo(User::class);
    }
}
